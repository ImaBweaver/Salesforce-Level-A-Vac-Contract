public class VACContractAppController {
    @auraEnabled
    public static void savePDFOpportunity(Id parentId){
        
        PageReference pdfPage = new PageReference('https://masterlocators--it--c.cs50.visual.force.com/apex/Vacuum_Excavation_Contract_Template');
        pdfPage.getParameters().put('ID', parentId);
             
 		ContentDocument cd = new ContentDocument();
       	String documentid;
        String OppName = String.ValueOf([SELECT Name FROM Opportunity WHERE Id =: parentid]);
        OppName = OppName.substringBetween('=', ',');

            List<ContentDocumentLink> listContentDocLink = [SELECT ContentDocumentId FROM ContentDocumentLink WHERE LinkedEntityId = '0063B000008hQ2QQAU'];
            List<String> listContentDocIds = new List<String> ();
            List<ContentVersion> listContentVersion = new List<ContentVersion> ();
        
        
            for(Integer i=0; i<listContentDocLink.size(); i++){
                String preFormatting = String.valueOf(listContentDocLink[i]);
                String postFormatting = preFormatting.substringBetween('=', ',');
                listContentDocIds.add(postFormatting);
                listContentVersion.add([SELECT Title FROM ContentVersion WHERE ContentDocumentId =: postFormatting]);
            }
            
            system.debug(listContentVersion);
        
            for(Integer i=0; i<listContentVersion.size(); i++){
                String preFormatting = String.valueOf(listContentVersion[i]);
                String postFormatting = preFormatting.subStringBetween('=',',');
                
                if(postFormatting == OppName + ' ' + 'Unsigned Proposal'){
                   documentid = listContentDocIds[i];
                }
                
            }
        	System.debug(documentid);
        	
            if(documentid != null){  
                
            ContentVersion cont = new ContentVersion(); 
                cont.VersionData = pdfPage.getContentAsPDF();
                cont.Title = OppName + ' ' + 'Unsigned Proposal';
                cont.PathOnClient = OppName + ' ' + 'Unsigned Proposal.pdf';
                cont.ContentDocumentId = documentid;
                cont.ReasonForChange = 'New Version Upladed by User';
                cont.IsMajorVersion = true;
        
            insert cont;
            }
            
            else{
                
            ContentVersion cont = new ContentVersion(); 
                cont.VersionData = pdfPage.getContentAsPDF();
                cont.Title = OppName + ' ' + 'Unsigned Proposal';
                cont.PathOnClient = OppName + ' ' + 'Unsigned Proposal.pdf';
                
                insert cont;
        
                ContentDocumentLink cdl = new ContentDocumentLink();
                cdl.ContentDocumentId = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id =: cont.Id].ContentDocumentId;
                cdl.LinkedEntityId = parentId;
                cdl.Visibility = 'AllUsers';
                cdl.ShareType = 'I';
                
                insert cdl;
            
            }
		        
    }
    
    @auraEnabled
    public static void SendProposaltoClient(Id parentId){
        
        String OppName = String.ValueOf([SELECT Name FROM Opportunity WHERE Id =: parentid]);
        OppName = OppName.substringBetween('=', ',');
        
        // Reference the attachment page, pass in the opportunity ID
        PageReference pdfPage = new PageReference('https://masterlocators--it--c.cs50.visual.force.com/apex/Vacuum_Excavation_Contract_Template');
        pdfPage.getParameters().put('ID', parentId);
        
        // Take the PDF content
        Blob pdfContent = pdfPage.getContent();
        
        // Get date and convert to standard formatting for attachment name
        DateTime d = Date.Today() + 1 ;
		String dateStr =  d.format('MM/dd/yyyy') ;
        
        ContentVersion cont = new ContentVersion(); 
		cont.VersionData = pdfPage.getContentAsPDF();
        cont.Title =OppName + ' ' + 'Unsigned Proposal';
        cont.PathOnClient =OppName + ' ' + 'Unsigned Proposal.pdf';
        
            
        insert cont;

        ContentDocumentLink cdl = new ContentDocumentLink();
        cdl.ContentDocumentId = [SELECT Id, ContentDocumentId FROM ContentVersion WHERE Id =: cont.Id].ContentDocumentId;
        cdl.LinkedEntityId = parentId;
		cdl.Visibility = 'AllUsers';
        cdl.ShareType = 'I';
		
        insert cdl;
        
        // Create the email attachment
        Messaging.EmailFileAttachment efa = new Messaging.EmailFileAttachment();
        efa.setFileName(dateStr + ' '  + 'Master Locators Unsigned Proposal.pdf');
        efa.setBody(pdfContent);
        
        // Compile and send the email to the address
        List<Messaging.SingleEmailMessage> mails =  new List<Messaging.SingleEmailMessage>();
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        mail.toAddresses = new String[] {'bweaver@masterlocators.com'};
        mail.setSenderDisplayName('Brandon Weaver');
        mail.subject = 'Master Locators | ' + dateStr + ' ' + 'Unsigned Contract';
		mail.plainTextBody = 'Hi ' + ', this is a test email';
        mail.setFileAttachments(new Messaging.EmailFileAttachment[] {efa});
        mails.add(mail);
        Messaging.SendEmailResult[] results = Messaging.sendEmail(mails);
        
        if (results[0].success) {
    		System.debug('The email was sent successfully.');
		} else {
    		System.debug('The email failed to send: ' + results[0].errors[0].message);
		}

        
    }
    
     @AuraEnabled
    public static List<List<String>> getAssumptionsPiklistValues(Id recordId) {
        List<String> plValues = new List<String>();
        List<Opportunity> OppdefaultValues = new List<Opportunity>();
        List<String> defaultValues = new List<String>();
        List<List<String>> returnValues = new List<List<String>>();
        
        OppdefaultValues = [SELECT VAC_Contract_Assumptions__c FROM Opportunity WHERE Id=:recordId];
        for(Opportunity o : OppdefaultValues){
            defaultValues.add(String.valueOf(o.VAC_Contract_Assumptions__c));
        }
        
        //Get the object type from object name.
        Schema.SObjectType objType = Schema.getGlobalDescribe().get('Opportunity');
         
        //Describe the sObject using its object type.
        Schema.DescribeSObjectResult objDescribe = objType.getDescribe();
         
        //Get the specific field information from field name.
        Schema.DescribeFieldResult objFieldInfo = objDescribe.fields.getMap().get('VAC_Contract_Assumptions__c').getDescribe();
         
        //Get the picklist field values.
        List<Schema.PicklistEntry> picklistvalues = objFieldInfo.getPicklistValues();
         
        //Add the picklist values to list.
        for(Schema.PicklistEntry plv: picklistvalues) {
            plValues.add(plv.getValue());
        }
        plValues.sort();
        
        returnValues.add(plValues);
        returnValues.add(defaultValues);
        return returnValues;
    }
    
    @AuraEnabled
    public static String getAdditional_Assumptions(String recordId){
        system.debug(recordId);
        String AddAssumptions = String.valueOf([Select Additional_Assumptions__c FROM Opportunity WHERE Id =: recordId]);
		AddAssumptions = AddAssumptions.substringBetween('=', ', Id');
        
        return AddAssumptions;
    }

    @AuraEnabled
    public static void UpdateAssumptions(String recordId, List<String> additionalAssumptions){
        system.debug(recordId);
        system.debug(additionalAssumptions);
        String stringAssumptions = '';
        for(String i: additionalAssumptions){
            stringAssumptions = stringAssumptions + ',';
        }
        Opportunity targetOpp = new Opportunity();
        targetOpp = [SELECT Id FROM Opportunity WHERE Id =: recordId];
        system.debug(targetOpp.Id);
        targetOpp.Additional_Assumptions__c = stringAssumptions;
        
        
        Update targetOpp;
        
    }


}
